{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1 style=\"font-size:40px;\"><center>Exercise I:<br> Multi-layer perceptrons\n",
    "for classification and regression problems.\n",
    "</center></h1>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Short summary\n",
    "In this exercise you will: \n",
    "\n",
    "* train MLPs and for both classification and regression problems\n",
    "* overtraining models and see how overtraining changes validation performance\n",
    "* avoid overtraining using regularization\n",
    "* do model selection\n",
    "\n",
    "There are 10 questions in this exercise. These 10 question can be found in four different cells below (also see section \"The Different Cells\"). All of the exercises deal with training and evaluation of the multi-layer perceptron (MLP) network. You are going to work with different datasets (see below), binary classification problems and function approximation (regression) problems. For all questions, except the last one, code is available that you can run directly or only need to make small modifications to. For the last question we only provide a small part of the code and you should provide the rest. However, it is typically just a matter of paste and copy from the previous code cells (in a proper way).\n",
    "\n",
    "You will write the report of the exercise within this notebook. The details of how to do that can be found below in section \"Writing the report\". Finally before you start:\n",
    "\n",
    "**Deadline for submitting the report: December 7, 12:00 (2017)**\n",
    "\n",
    "\n",
    "## The data\n",
    "There are several datasets in this exercise. \n",
    "\n",
    "### syn1 - syn3\n",
    "Three different synthetic classification problems will be used. They are all 2D binary classification problems which allows for an easy visual inspection of the different classes and the decision boundary implemented by the network. They are called *syn1, syn2* and *syn3*. Each of these datasets are generated \"on the fly\" each time. They come from various normal distributions. Since they are generated using random numbers it means that each time you generate the data it will be slightly different from next time. You can control this by having a fixed *seed* to the random number generator. The cell \"PlotData\" will plot these datasets.\n",
    "\n",
    "### regr1\n",
    "There is also a synthetic regression problem, called *regr1*. It has 6 inputs (independent variables) and one output variable (dependent variable). It is generated according to the following formula:  \n",
    "\n",
    "$\\qquad d = 2x_1 + x_2x_3^2 + e^{x_4} + 5x_5x_6 + 3\\sin(2\\pi x_6) + \\alpha\\epsilon$  \n",
    "    \n",
    "where $\\epsilon$ is added normally distributed noise and $\\alpha$ is a parameter controlling the size of the added noise. Variables $x_1,...,x_4$ are normally distrubuted with zero mean and unit variance, whereas $x_5, x_6$ are uniformly distributed ($[0,1]$). The target value $d$ has a non-linear dependence on ***x***.\n",
    "\n",
    "### Pima Indians diabetes dataset\n",
    "*This data set is taken from the UCI Machine Learning Repository [http://archive.ics.uci.edu/ml/datasets/pima+indians+diabetes].* In short this dataset contains 8 independent variables (clinical data) and a binary target value, where 1 indicates \"tested positive for diabetes\". In total there are 768 cases in the dataset, divided into a fixed training dataset of 538 cases and a validation dataset of the remaining 230 cases. The dataset is provided as the two files *pima-trn.csv* and *pima_val.csv*. \n",
    "\n",
    "## The exercises\n",
    "There are 10 questions, where the first 5 questions are dealing with 2D binary classification problems. Here you will be able to see the boundary implemented by the different MLPs that you train. Questions 6-9 deals with training a regression network for the *regr1* dataset. Here you are also going to use regularization to \"combat\" overtraining. Finally the last question, here your task is to come up with a model for the Pima classification problem. You should make a model that optimizes the validation result.\n",
    "\n",
    "## The different 'Cells'\n",
    "This notebook contains several cells with python code, together with the markdown cells (like this one) with only text. Each of the cells with python code has a \"header\" markdown cell with information about the code. The table below provides a short overview of the code cells. \n",
    "\n",
    "| #  |  CellName | CellType | Comment |\n",
    "| :--- | :-------- | :-------- | :------- |\n",
    "| 1 | Init | Needed | Sets up the environment|\n",
    "| 2 | MLP | Needed | Defines the MLP model |\n",
    "| 3 | Data | Needed | Defines the functions to generate the artificial datasets |\n",
    "| 4 | PlotData | Information | Plots the 2D classification datasets |\n",
    "| 5 | Statistics | Needed | Defines the functions that calculates various performance measures |\n",
    "| 6 | Boundary | Needed | Function that can show 2D classification boundaries |\n",
    "| 7 | Ex1 | Exercise | For question 1 |\n",
    "| 8 | Ex2 | Exercise | For question 2-5 |\n",
    "| 9 | Ex3 | Exercise | For question 6-9 |\n",
    "| 10 | Ex4 | Exercise | For question 10 |\n",
    "\n",
    "In order for you to start with the exercise you need to run all cells with the celltype \"Needed\". The very first time you start with this exercise we suggest that you enter each of the needed cells, read the cell instruction and run the cell. It is important that you do this in the correct order, starting from the top and work you way down the cells. Later when you have started to work with the notebook it may be easier to use the command \"Run All\" found in the \"Cell\" dropdown menu.\n",
    "\n",
    "## Writing the report\n",
    "First the report should be written within this notebook. We have prepared the last cell in this notebook for you where you should write the report. The report should contain 4 parts:\n",
    "\n",
    "* Name:\n",
    "* Introduction: A **few** sentences where you give a small introduction of what you have done in the lab.\n",
    "* Answers to questions: For each of the questions provide an answer. It can be short answers or a longer ones depending on the nature of the questions, but try to be effective in your writing.\n",
    "* Conclusion: Summarize your findings in a few sentences.\n",
    "\n",
    "It is important that you write the report in this last cell and **not** after each question! Also when uploading your report to Live@Lund, name the file according to:\n",
    "\n",
    "**lab1_Surname_Firstname.ipynb**\n",
    "\n",
    "## Last but not least\n",
    "Have fun!\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CellName: Init (#1)\n",
    "### CellType: Needed\n",
    "### Cell instruction: Initializing the libraries\n",
    "\n",
    "In the cell below, we import all the libraries that are needed for this exercises. There are two configuration parameters that you can change in this cell\n",
    "\n",
    "* The size of the plots\n",
    "* Inline or \"pop out\" plots.\n",
    "\n",
    "See comments in the cell for more information. Default is inline plots with a \"lagom\" size. Run the cell by entering into the cell and press \"CTRL Enter\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ['KERAS_BACKEND']='tensorflow'\n",
    "\n",
    "import numpy as np\n",
    "import scipy as sp\n",
    "import tensorflow as tf\n",
    "import random as rn\n",
    "\n",
    "import keras\n",
    "from keras import backend as K\n",
    "from keras.layers import Dense, Input\n",
    "from keras.models import Model\n",
    "from keras import metrics, regularizers\n",
    "\n",
    "from sklearn.metrics import *\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib as mpl\n",
    "\n",
    "# The size of the plots.\n",
    "mpl.rcParams['figure.figsize'] = (5,5)\n",
    "\n",
    "\n",
    "# To have the plots inside the notebook \"inlin\" should be True. \n",
    "# If \"inlin\" = False, then plots will pop out of the notebook\n",
    "inlin = True # True/False\n",
    "if inlin:\n",
    "    %matplotlib inline\n",
    "else:\n",
    "    %matplotlib \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CellName: MLP (#2)\n",
    "### CellType: Needed\n",
    "### Cell instruction: Defining the MLP model\n",
    "\n",
    "This cell defines the MLP model. There are a number of parameters that is needed to \n",
    "define a model. Here is a list of them: **Note:** They can all be specified when you call\n",
    "this function in later cells. The ones specified in this cell are the default values.\n",
    "\n",
    "* inp_dim: the input dimension (integer)\n",
    "\n",
    "* n_nod: size of the network, eg [5] for a one hidden layer with 5 nodes and [5,3] for a two layer network with 5 and 3 hidden nodes each.\n",
    "\n",
    "* act_fun: the activation function. Most common are\n",
    "    * 'linear'\n",
    "    * 'relu'\n",
    "    * 'tanh'\n",
    "    * 'sigmoid'\n",
    "        \n",
    "* out_act_fun: the activation function for the output nodes. Most common are\n",
    "    * 'linear'\n",
    "    * 'sigmoid'\n",
    "    * 'softmax'\n",
    "    \n",
    "* opt_method: The error minimization method. Common choices\n",
    "    * 'SGD'\n",
    "    * 'Adam'\n",
    "    * 'Nadam'\n",
    "    * 'RMSprop'\n",
    "    \n",
    "* cost_fun: The error function used during training. There are three common ones\n",
    "    * 'mean_squared_error'\n",
    "    * 'binary_crossentropy'\n",
    "    * 'crossentropy?'\n",
    "\n",
    "* lr_rate: The learning rate. Note some of the minimization methods uses a dynamical learning rate. In such a cases this value sets the initial learning rate.\n",
    "\n",
    "* lambd: L2 regularization parameter\n",
    "\n",
    "\n",
    "Run the cell by entering into the cell and press \"CTRL Enter\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def pipline(inp_dim,\n",
    "            n_nod,\n",
    "            act_fun = 'relu',\n",
    "            out_act_fun = 'sigmoid',\n",
    "            opt_method = 'Adam',\n",
    "            cost_fun = 'binary_crossentropy',\n",
    "            lr_rate = 0.01, \n",
    "            lambd = 0.0):\n",
    "    \n",
    "    lays = [inp_dim] + n_nod\n",
    "    \n",
    "    main_input = Input(shape=(inp_dim,), dtype='float32', name='main_input')\n",
    "    \n",
    "    X = main_input\n",
    "    for nod in n_nod:\n",
    "        X = Dense(nod, \n",
    "                  activation = act_fun,\n",
    "                  kernel_regularizer=regularizers.l2(lambd))(X)\n",
    "        \n",
    "    output = Dense(1, activation = out_act_fun )(X)\n",
    "    \n",
    "    method = getattr(keras.optimizers, opt_method)\n",
    "    \n",
    "    model =  Model(inputs=[main_input], outputs=[output])\n",
    "    model.compile(optimizer = method(lr = lr_rate),\n",
    "                  loss = cost_fun)   \n",
    "    \n",
    "    return model\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CellName: Data (#3)\n",
    "### CellType: Needed\n",
    "### Cell instruction: Defining synthetic data sets\n",
    "\n",
    "This cell defines the three different synthetic data sets and the regression dataset. Run the cell by entering into the\n",
    "cell and press \"CTRL Enter\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def syn1(N):\n",
    "    \"\"\" data(samples, features)\"\"\"\n",
    "    \n",
    "    global seed\n",
    "    \n",
    "    data = np.empty(shape=(N,2), dtype = np.float32)  \n",
    "    tar = np.empty(shape=(N,), dtype = np.float32) \n",
    "    N1 = int(N/2)\n",
    "  \n",
    "    data[:N1,0] = 4 + np.random.normal(loc=.0, scale=1., size=(N1))\n",
    "    data[N1:,0] = -4 + np.random.normal(loc=.0, scale=1., size=(N-N1))\n",
    "    data[:,1] = 10*np.random.normal(loc=.0, scale=1., size=(N))\n",
    "    \n",
    "    \n",
    "    data = data / data.std(axis=0)\n",
    "    \n",
    "    # Target\n",
    "    tar[:N1] = np.ones(shape=(N1,))\n",
    "    tar[N1:] = np.zeros(shape=(N-N1,))\n",
    "    \n",
    "    # Rotation\n",
    "    theta = np.radians(30)\n",
    "    c, s = np.cos(theta), np.sin(theta)\n",
    "    R = np.array([[c,-s],[s,c]]) # rotation matrix\n",
    "    data = np.dot(data,R) \n",
    "    \n",
    "    return data,tar\n",
    "\n",
    "\n",
    "def syn2(N):\n",
    "    \"\"\" data(samples, features)\"\"\"\n",
    "    \n",
    "    global seed\n",
    "     \n",
    "    data = np.empty(shape=(N,2), dtype = np.float32)  \n",
    "    tar = np.empty(shape=(N,), dtype = np.float32) \n",
    "    N1 = int(N/2)\n",
    "\n",
    "    # Positive samples\n",
    "    data[:N1,:] = 0.8 + np.random.normal(loc=.0, scale=1., size=(N1,2))\n",
    "    # Negative samples \n",
    "    data[N1:,:] = -.8 + np.random.normal(loc=.0, scale=1., size=(N-N1,2))\n",
    "    \n",
    "    \n",
    "    # Target\n",
    "    tar[:N1] = np.ones(shape=(N1,))\n",
    "    tar[N1:] = np.zeros(shape=(N-N1,))\n",
    "\n",
    "    return data,tar\n",
    "\n",
    "\n",
    "def syn3(N):\n",
    "    \"\"\" data(samples, features)\"\"\"\n",
    "\n",
    "    global seed\n",
    "    \n",
    "    data = np.empty(shape=(N,2), dtype = np.float32)  \n",
    "    tar = np.empty(shape=(N,), dtype = np.float32) \n",
    "    N1 = int(2*N/3)\n",
    "    \n",
    "    # disk\n",
    "    teta_d = np.random.uniform(0, 2*np.pi, N1)\n",
    "    inner, outer = 2, 5\n",
    "    r2 = np.sqrt(np.random.uniform(inner**2, outer**2, N1))\n",
    "    data[:N1,0],data[:N1,1] = r2*np.cos(teta_d), r2*np.sin(teta_d)\n",
    "        \n",
    "    #circle\n",
    "    teta_c = np.random.uniform(0, 2*np.pi, N-N1)\n",
    "    inner, outer = 0, 3\n",
    "    r2 = np.sqrt(np.random.uniform(inner**2, outer**2, N-N1))\n",
    "    data[N1:,0],data[N1:,1] = r2*np.cos(teta_c), r2*np.sin(teta_c)\n",
    "    \n",
    "    # Normalization\n",
    "    #data = data - data.mean(axis=0)/data.std(axis=0)\n",
    "\n",
    "    tar[:N1] = np.ones(shape=(N1,))\n",
    "    tar[N1:] = np.zeros(shape=(N-N1,))\n",
    "    \n",
    "    return data, tar\n",
    "\n",
    "\n",
    "def regr1(N, v=0):\n",
    "    \"\"\" data(samples, features)\"\"\"\n",
    "\n",
    "    global seed\n",
    "\n",
    "    data = np.empty(shape=(N,6), dtype = np.float32)  \n",
    "    \n",
    "    uni = lambda n : np.random.uniform(0,1,n)\n",
    "    norm = lambda n : np.random.normal(0,1,n)\n",
    "    noise =  lambda  n : np.random.normal(0,1,n)\n",
    "    \n",
    "    \n",
    "    for i in range(4):\n",
    "        data[:,i] = norm(N)\n",
    "    for j in [4,5]:\n",
    "        data[:,j] = uni(N)\n",
    "    \n",
    "    tar =   2*data[:,0] + data[:,1]* data[:,2]**2 + np.exp(data[:,3]) + \\\n",
    "            5*data[:,4]*data[:,5]  + 3*np.sin(2*np.pi*data[:,5])\n",
    "    std_signal = np.std(tar)\n",
    "    tar = tar + v * std_signal * noise(N)\n",
    "        \n",
    "    return data, tar\n",
    "            "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CellName: PlotData (#4)\n",
    "### CellType: Information\n",
    "### Cell instruction: Plotting the data\n",
    "\n",
    "Here we just generate 100 cases for each data set and plot them. Run the cell by entering into the\n",
    "cell and press \"CTRL Enter\". \n",
    "\n",
    "**Note!** This cell is not needed for the actual exercises, it is just to visualize the three different 2D synthetic classification data sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1206132b0>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXYAAAD8CAYAAABjAo9vAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3Xd4VFX6wPHvO30mCSR0RGl2RBBFLKiIYgEVy4plFXtf\nd92fvbe1l9W1i2tfe+8FEewNEKUqSFEU6anT557fHzcEkplJIZOZZPJ+niePyb137nm5Tt7cOfec\n94gxBqWUUvnDkesAlFJKZZYmdqWUyjOa2JVSKs9oYldKqTyjiV0ppfKMJnallMozmtiVUirPaGJX\nSqk8o4ldKaXyjCsXjXbp0sX07ds3F00rpVSbNW3atFXGmK4NHZeTxN63b1+mTp2ai6aVUqrNEpEl\njTlOu2KUUirPaGJXSqk8o4ldKaXyjCZ2pZTKM5rYlVIqz+RkVIxS2RCqCvP+o5P47NVv6NilA4ed\nO5rBe2+X67CUanGa2FVeCgcj/H2Xy/hz8QoiwSgA370/gxOvO4pxF4zNcXRKtSztilF56YMnJtdK\n6gCRYIQnrnqeytKqHEamVMvTxK7y0pevf1srqa/j8riY+/XPOYhIqezRxK7yUnG3YkQkabuxDEWd\nCnMQkVLZo4ld5aVD/3YAHr+n1jZxCMXdO7L1zlvkKCqlskMTu8pLA3bbmjPvGI/X7yHQwY+v0EfP\n/t255f0rU97JK5VPxBiT9UaHDh1qtAiYyoZQZYh53y6gsLiALYb0y0lSD1aEcLoceP3erLet8ouI\nTDPGDG3oOB3uqPKav9DPkH22b9Y5Zn0xj4+e/hTLstjn2D0YvPd2jfoDsWjmEm4/+X4W/vgrIrDj\nfoO48NFzKOle3Kx4lGqI3rErVY9HLnmaN+7/gGgogjHgK/AyavwIznvg9HpfV7aqnBO3/DtVZcGa\nbU63k579u/Po7LtwOLQXVDVdY+/Y9d2lVBq/zvudN+57n0jQTuoA4aoIE5/6hJ+n/VLvaz94YjKx\naLzWtkQsweo/1vDDlNktFbJSgCZ2pdL69t3pWAkraXssHOXrt6fV+9pf5/5ONJQ8jt5Yhj8XrchY\njEqlooldqTS8fg8OV/KviNPlxBeo/0Hotrtsia8g9TH9B/fNRHhKpaWJXak09jxyV1I9ghKng72P\n3r3e1+5z3J4UdSrE6XLWbPP43Gyzy5ZsPXTzTIeqVC2a2FXOJOIJylaVk0gkch1KSsVdO3L5M+fh\n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\n2+UqLNWGNfeOfSIw0BgzCPgZuKz5ISnVvtgTml4B30EghSCdoOAEpOSRXIem2qhmDXc0xny4wY9f\nA0c2Lxyl2idxdkeK78h1GCpPZLKP/RTgvQyeTyml1EZo8I5dRD4CeqTYdYUx5o3qY67AXlHgmXrO\ncwZwBkDv3r03KlillFINazCxG2NG1bdfRE4CDgb2NfXMpjDGTAAmAAwdOlRnXSilVAtpVh+7iBwI\nXAyMMMYEMxOSUkqp5mhuH/t9QBEwUURmiEj9qwUrpZRqcc0dFbNFpgJRSimVGTrzVCml8owmdqWU\nyjOa2JVSKs9oYldKqTyjiV0ppfKMJnallMozmtiVUirPaGJXSqk8o4ldKaXyjCZ2pZTKM5rYlVIq\nz2hiV0qpPKOJXSml8owmdqWUyjOa2JVSKs9oYldKqTyjiV3lHWNVYhLLqWcJXqXyWrNWUFKqNTFW\nOabsUoh8AjjA0Qk63oB498x1aEplld6xq7xh1p4FkU+BGBABaxlm7d8wsZ9zHZpSWaWJXeUFE18I\nsVlAtM6eKCb4eC5CUipnNLGr/JBYBpKqZ9GC+OJsR6NUTmliV/nBtTWYunfrAB7w7JL1cJTKJU3s\nKi+IswsEjgb8G2x1ghQggfG5CkupnNBRMSpvSNGVGOdWEHwcTDl49kSK/ok4O+c6NKWyShO7yhsi\nghQcDQVH5zoUpXJKu2KUUirPaGJXSqk8o4ldKaXyjCZ2pZTKM5rYlVIqz2hiV0qpPCO5KG0qIiuB\nJU18WRdgVQuE01ytNS5ovbFpXE2jcTVda42tuXH1McZ0beignCT2jSEiU40xQ3MdR12tNS5ovbFp\nXE2jcTVda40tW3FpV4xSSuUZTexKKZVn2lJin5DrANJorXFB641N42oajavpWmtsWYmrzfSxK6WU\napy2dMeulFKqEVptYheR20Vknoj8KCKviUhxmuMOFJGfRGSBiFyahbjGichsEbFEJO3TbRFZLCIz\nRWSGiExtRXFl9XpVt9lJRCaKyPzq/5akOS4r16yhayC2e6r3/ygiO7ZULE2Ma28RKau+PjNE5Oos\nxfWYiKwQkVlp9ufqejUUV66u12YiMllE5lT/Tp6X4piWvWbGmFb5BewPuKq/vxW4NcUxTuAXoD/g\nAX4ABrRwXNsCWwNTgKH1HLcY6JLF69VgXLm4XtXt3gZcWv39pan+X2brmjXmGgBjgPcAAXYFvsnC\nNWpMXHsDb2frPbVBu3sBOwKz0uzP+vVqZFy5ul49gR2rvy8Cfs72e6zV3rEbYz40xsSrf/wa2DTF\nYcOABcaYhcaYKPA8cGgLxzXXGPNTS7axMRoZV9avV7VDgServ38SOCwLbabTmGtwKPCUsX0NFItI\nz1YQV04YYz4F1tRzSC6uV2PiygljzDJjzPTq7yuAuUCvOoe16DVrtYm9jlOw/7rV1Qv4bYOfl5J8\nAXPFAB+JyDQROSPXwVTL1fXqboxZVv39n0D3NMdl45o15hrk4jo1ts3dqz+6vyci27VwTI3Vmn8P\nc3q9RKQvMAT4ps6uFr1mOV1BSUQ+Anqk2HWFMeaN6mOuAOLAM60prkbYwxjzu4h0AyaKyLzqO4xc\nx9Ui6ottwx+MMUZE0g3Fyvg1yzPTgd7GmEoRGQO8DmyZ45has5xeLxEpBF4B/mmMKc9Wu5DjxG6M\nGVXffhE5CTgY2NdUd0zV8Tuw2QY/b1q9rUXjauQ5fq/+7woReQ37o3azklQG4mqR6wX1xyYiy0Wk\npzFmWfXHzRVpzpHxa5ZCY65Bi12n5sS1YXIwxrwrIg+ISBdjTK5rouTiejUol9dLRNzYSf0ZY8yr\nKQ5p0WvWartiRORA4GJgrDEmmOaw74AtRaSfiHiAY4A3sxVjOiJSICJF677HfhCc8sl9luXqer0J\nnFj9/YlA0qeLLF6zxlyDN4ETqkcu7AqUbdCV1FIajEtEeoiIVH8/DPv3d3ULx9UYubheDcrV9apu\n81FgrjHm32kOa9lrlu0nxo39AhZg90HNqP56qHr7JsC7Gxw3Bvup8y/YXRItHdfh2P1hEWA58EHd\nuLBHNvxQ/TW7tcSVi+tV3WZnYBIwH/gI6JTLa5bqGgBnAWdVfy/A/dX7Z1LP6Kcsx3Vu9bX5AXtA\nwe5Zius5YBkQq36PndpKrldDceXqeu2B/bzoxw3y15hsXjOdeaqUUnmm1XbFKKWU2jia2JVSKs9o\nYldKqTyjiV0ppfKMJnallMozmtiVUirPaGJXSqk8o4ldKaXyzP8D4IVhRK3+AYoAAAAASUVORK5C\nYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1202b1c18>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\ne0TEyHwHq8CucMYEVN4AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x120547a20>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1205f9d30>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# seed = 0 means random, seed > 0 means fixed\n",
    "seed = 0\n",
    "np.random.seed(seed) if seed else None\n",
    "\n",
    "d,t = syn1(100)\n",
    "plt.figure(1)\n",
    "plt.scatter(d[:,0],d[:,1], c=t)\n",
    "\n",
    "d,t = syn2(100)\n",
    "plt.figure(2)\n",
    "plt.scatter(d[:,0],d[:,1], c=t)\n",
    "\n",
    "d,t = syn3(100)\n",
    "plt.figure(3)\n",
    "plt.scatter(d[:,0],d[:,1], c=t)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CellName: Statistics (#5)\n",
    "### CellType: Needed\n",
    "### Cell instruction: Present result for both classification and regression problems\n",
    "\n",
    "This cell defines two functions that we are going to call using a trained model to calculate both error and performance measures. Run the cell by entering into the cell and press \"CTRL Enter\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def stats_class(x = None, y = None, label = 'Training', modl = None):\n",
    "    \"\"\"\n",
    "    input :  \n",
    "             x = input\n",
    "             y = output\n",
    "             label = \"Provided text string\"\n",
    "             modl = the model\n",
    "             \n",
    "    output : \n",
    "             sensitivity = fraction of correctly classified positive cases\n",
    "             specificity = fraction of correctly classified negative cases\n",
    "             accuracy = fraction of correctly classified cases\n",
    "             loss = typically the cross-entropy error\n",
    "    \"\"\"\n",
    "    \n",
    "    def binary(y1):\n",
    "        y1[y1>.5] = 1.\n",
    "        y1[y1<= .5] = 0.        \n",
    "        return y1\n",
    "\n",
    "    y_pr = modl.predict(x, batch_size = x.shape[0], verbose=0).reshape(y.shape)\n",
    "                \n",
    "    nof_p, tp, nof_n, tn = [np.count_nonzero(k) for k in [y==1, y_pr[y==1.] > 0.5, y==0, y_pr[y==0.]<= 0.5]]\n",
    "    \n",
    "    sens = tp / nof_p\n",
    "    spec = tn / nof_n\n",
    "    acc = (tp + tn) / (len(y))\n",
    "    loss = modl.evaluate(x, y , batch_size =  x.shape[0], verbose=0)\n",
    "                \n",
    "    A = ['Accuracy', 'Sensitivity', 'Specificity', 'Loss']\n",
    "    B = [acc, sens, spec, loss]\n",
    "    \n",
    "    print('\\n#############  STATISTICS for {} Data ##############\\n'.format(label))\n",
    "    for r in zip(A,B):\n",
    "         print(*r, sep = '   ')\n",
    "    return print('\\n#########################################################\\n')  \n",
    "\n",
    "\n",
    "def stats_reg(d = None, d_pred = None, label = 'Training', estimat = None):\n",
    "    \n",
    "    A = ['MSE', 'CorrCoeff']\n",
    "    \n",
    "    pcorr = np.corrcoef(d, d_pred)[1,0]\n",
    "    \n",
    "    if label.lower() in ['training', 'trn', 'train']:\n",
    "        mse = estimat.history['loss'][-1]\n",
    "    else:\n",
    "        mse = estimat.history['val_loss'][-1] \n",
    "\n",
    "    B = [mse, pcorr]\n",
    "    \n",
    "    print('\\n#############  STATISTICS for {} Data ##############\\n'.format(label))\n",
    "    for r in zip(A,B):\n",
    "         print(*r, sep = '   ')\n",
    "    return print('\\n###########################################################\\n')  \n",
    "\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CellName: Boundary (#6)\n",
    "### CellType: Needed\n",
    "### Cell Instruction: Decision boundary\n",
    "\n",
    "This cell defines the function to plot the decision boundary for a 2D input binary MLP classifier. Run the cell by entering into the cell and press \"CTRL Enter\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def decision_b(X = None, Y1 = None ):\n",
    "    \n",
    "    x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5\n",
    "    y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5\n",
    "    # grid stepsize\n",
    "    h = 0.025\n",
    "\n",
    "    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\n",
    "    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])\n",
    "    Z = Z.reshape(xx.shape)\n",
    "\n",
    "    Z[Z>.5] = 1\n",
    "    Z[Z<= .5] = 0\n",
    "\n",
    "    Y_pr = model.predict(X, batch_size = X.shape[0], verbose=0).reshape(Y1.shape)\n",
    "  \n",
    "    Y = np.copy(Y1)\n",
    "    Y_pr[Y_pr>.5] = 1\n",
    "    Y_pr[Y_pr<= .5] = 0\n",
    "    Y[(Y!=Y_pr) & (Y==0)] = 2\n",
    "    Y[(Y!=Y_pr) & (Y==1)] = 3\n",
    "    \n",
    "    \n",
    "    plt.figure()\n",
    "    #plt.contourf(xx, yy, Z, cmap=plt.cm.PRGn, alpha = .9) \n",
    "    plt.contour(xx, yy, Z, cmap=plt.cm.Paired)\n",
    "    \n",
    "    \n",
    "    plt.scatter(X[:, 0][Y==1], X[:, 1][Y==1], marker='+', c='k')\n",
    "    plt.scatter(X[:, 0][Y==0], X[:, 1][Y==0], marker='o', c='k')\n",
    "       \n",
    "    plt.scatter(X[:, 0][Y==3], X[:, 1][Y==3], marker = '+', c='r')   \n",
    "    plt.scatter(X[:, 0][Y==2], X[:, 1][Y==2], marker = 'o', c='r')\n",
    "    \n",
    "    \n",
    "    plt.ylabel('x2')\n",
    "    plt.xlabel('x1')\n",
    "    plt.tight_layout()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "End of \"Needed\" and \"Information\" cells. Below are the cells for the actual exercise.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CellName: Ex1 (#7)\n",
    "### CellType: Exercise\n",
    "### Cell instruction: Instruction for question 1\n",
    "\n",
    "The cell below should be used for question 1. You can run the cell as it is (i.e. CTRL-Return). However, looking at the code will help you understand how the network is created, trained and evaluated. It will be useful for the other questions.\n",
    "\n",
    "#### Question 1\n",
    "\n",
    "Use synthetic data 1 (syn1) (100 data points) and train a linear MLP to separate the two classes, i.e. use a single hidden node. **Why can you solve this problem with a single hidden node?**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "main_input (InputLayer)      (None, 2)                 0         \n",
      "_________________________________________________________________\n",
      "dense_11 (Dense)             (None, 1)                 3         \n",
      "_________________________________________________________________\n",
      "dense_12 (Dense)             (None, 1)                 2         \n",
      "=================================================================\n",
      "Total params: 5\n",
      "Trainable params: 5\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "\n",
      "#############  STATISTICS for Training Data ##############\n",
      "\n",
      "Accuracy   1.0\n",
      "Sensitivity   1.0\n",
      "Specificity   1.0\n",
      "Loss   0.0340823046863\n",
      "\n",
      "#########################################################\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nUwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1219fbc18>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1214587b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# seed = 0 means random, seed > 0 means fixed\n",
    "seed = 1\n",
    "np.random.seed(seed) if seed else None\n",
    "    \n",
    "# Generate training data\n",
    "x_train, d_train = syn1(100)\n",
    "\n",
    "# Define the network, cost function and minimization method\n",
    "INPUT = {'inp_dim': x_train.shape[1],         \n",
    "         'n_nod': [1],                      # number of nodes in hidden layer\n",
    "         'act_fun': 'tanh',                 # activation functions for the hidden layer\n",
    "         'out_act_fun': 'sigmoid',          # output activation function\n",
    "         'opt_method': 'sgd',               # minimization method\n",
    "         'cost_fun': 'binary_crossentropy', # error function\n",
    "         'lr_rate': 0.1                    # learningrate\n",
    "        }\n",
    "\n",
    "# Get the model\n",
    "model = pipline(**INPUT)\n",
    "\n",
    "# Print a summary of the model\n",
    "model.summary()\n",
    "\n",
    "# Train the model\n",
    "estimator = model.fit(x_train, d_train,\n",
    "                      epochs = 300,                     # Number of epochs\n",
    "                      #validation_data=(x_val, y_val),  # We don't have any validation dataset!\n",
    "                      batch_size = x_train.shape[0],    # Use batch learning\n",
    "                      #batch_size=25,                   \n",
    "                      verbose = 0)\n",
    "\n",
    "# Call the stats function to print out statistics for the training\n",
    "stats_class(x_train, d_train, 'Training', model)\n",
    "\n",
    "# Some plotting\n",
    "plt.plot(estimator.history['loss'])\n",
    "plt.title('Model training')\n",
    "plt.ylabel('training error')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train'], loc=0)\n",
    "plt.show()\n",
    "\n",
    "# Show the decision boundary\n",
    "decision_b(x_train, d_train)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CellName: Ex2 (#8)\n",
    "### CellType: Exercise\n",
    "### Cell instruction: Instruction for question 2-5\n",
    "\n",
    "The cell below should be used for questions 2-5. For question 2 you can run the cell as it is (i.e. CTRL-Return). For the other questions you need to modify the cell in order to change data set, vary the size of the network etc. There are brief comments in the code that will guide you here.\n",
    "\n",
    "From now on we will talk about *performance*! It can be performance of a trained model on the training dataset or the performance on the validation dataset. What do we mean by performance?  For classification problems we will provide 4 different measurements as returned by a call to the *stats_class* function. They are:\n",
    "* Sensitivity = fraction of correctly classified \"1\" cases\n",
    "* Specificity = fraction of correctly classified \"0\" cases\n",
    "* Accuracy = fraction of correctly classified cases\n",
    "* loss = cross-entropy error\n",
    "\n",
    "Our suggestion for you is to either use accuracy or loss as your performance measure.\n",
    "\n",
    "#### Question 2\n",
    "Here you are going to train a classifier for the *syn2* dataset. You are also going to use a validation dataset as an estimate of the *true* performance. Since we generate these datasets we can allow for a relatively large validation dataset in order to get a more accurate estimation of *true* performance. The default value in the cell is to generate 1000 validation datapoints. \n",
    "\n",
    "Now, use synthetic data 2 (syn2)(100 training data points) and train a *linear* MLP to separate the two classes, i.e. use a single hidden node. **What is the performance you get on the validation dataset?** Note: Use a fixed random seed for this exercise since you will compare with runs in the next question.\n",
    "\n",
    "#### Question 3\n",
    "You are now going to overtrain the MLP! By increasing the number of hidden nodes we should be able to get better and better training performance. **How many hidden nodes do you need to reach an accuracy >95% on your training dataset?**\n",
    "\n",
    "**Hint:** Overtraining here often means finding good local minimum of the error function, which may require some tuning of the learning parameters. This means that you may have to change the learning rate, increase the number of epochs and use \"better\" minimization methods. Even though we have not yet talked about the *Adam* minimization method, it is generally better than vanilla *stochastic gradient descent*. It is therefore used in the cells below as the default minimizer. Also you may want to change the size of the \"batch_size\" parameter. It is by default using all data.\n",
    "\n",
    "#### Question 4\n",
    "The effect of overtraining can be monitored by looking at the validation performance. **(a) When you overtrained in the previous question, how much much did the validation *loss* increase, compared to the linear model of Q2?** **(b) What is the optimal number of hidden nodes for the syn2 dataset in order to maximize your validation performance?** \n",
    "\n",
    "#### Question 5\n",
    "Now you are going to use the *syn3* dataset. So, use **150** training datapoints from the synthetic dataset 3 and train an MLP to separate the two classes. Also use about 1000 datapoints for validation. By looking at the data, one would expect to need at least 3 hidden neurons to separate the two classes. **Why?**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "main_input (InputLayer)      (None, 2)                 0         \n",
      "_________________________________________________________________\n",
      "dense_13 (Dense)             (None, 1)                 3         \n",
      "_________________________________________________________________\n",
      "dense_14 (Dense)             (None, 1)                 2         \n",
      "=================================================================\n",
      "Total params: 5\n",
      "Trainable params: 5\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "\n",
      "#############  STATISTICS for Training Data ##############\n",
      "\n",
      "Accuracy   0.85\n",
      "Sensitivity   0.86\n",
      "Specificity   0.84\n",
      "Loss   0.326793134212\n",
      "\n",
      "#########################################################\n",
      "\n",
      "\n",
      "#############  STATISTICS for Validation Data ##############\n",
      "\n",
      "Accuracy   0.873\n",
      "Sensitivity   0.904\n",
      "Specificity   0.842\n",
      "Loss   0.292841345072\n",
      "\n",
      "#########################################################\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x121df57b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 15.1 s, sys: 5.58 s, total: 20.7 s\n",
      "Wall time: 13.1 s\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1215b68d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x121e619b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%time\n",
    "# seed = 0 means random, seed > 0 means fixed\n",
    "seed = 3\n",
    "np.random.seed(seed) if seed else None\n",
    "\n",
    "# Generate training data\n",
    "x_train, d_train = syn2(100)\n",
    "x_val, d_val = syn2(1000)\n",
    "\n",
    "# Define the network, cost function and minimization method\n",
    "INPUT = {'inp_dim': x_train.shape[1],         \n",
    "         'n_nod': [1],                      # number of nodes in hidden layer\n",
    "         'act_fun': 'tanh',                 # activation functions for the hidden layer\n",
    "         'out_act_fun': 'sigmoid',          # output activation function\n",
    "         'opt_method': 'adam',               # minimization method\n",
    "         'cost_fun': 'binary_crossentropy', # error function\n",
    "         'lr_rate': 0.07                     # learningrate\n",
    "         }\n",
    "\n",
    "# Question 3\n",
    "#INPUT['n_nod'] = [1]\n",
    "\n",
    "# Question 4\n",
    "INPUT['n_nod'] = [1]\n",
    "\n",
    "# Questions 5\n",
    "#x_train, d_train = syn3(150)\n",
    "#x_val, d_val = syn3(1000)\n",
    "#INPUT['n_nod'] = [3]\n",
    "\n",
    "# Get the model\n",
    "model = pipline(**INPUT)\n",
    "\n",
    "# Print a summary of the model\n",
    "model.summary()\n",
    "\n",
    "# Train the model\n",
    "estimator = model.fit(x_train, d_train,\n",
    "                      epochs = 1000,      \n",
    "                      validation_data=(x_val, d_val),\n",
    "                      batch_size = x_train.shape[0],    # Batch size = all data (batch learning)\n",
    "                      #batch_size=50,                   # Batch size for true SGD\n",
    "                      verbose = 0)\n",
    "\n",
    "# Call the stats function to print out statistics for classification problems\n",
    "stats_class(x_train, d_train, 'Training', model)\n",
    "stats_class(x_val, d_val, 'Validation', model)\n",
    "\n",
    "# Plot the learning curves\n",
    "plt.plot(estimator.history['loss'])\n",
    "plt.plot(estimator.history['val_loss'])\n",
    "plt.title('Model training')\n",
    "plt.ylabel('training error')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'validation'], loc=0)\n",
    "plt.show()\n",
    "\n",
    "# Show the decision boundary for the training dataset\n",
    "decision_b(x_train, d_train)\n",
    "\n",
    "# If you uncomment this one you will see how the decsion boundary is with respect to the validation data\n",
    "decision_b(x_val, d_val)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CellName: Ex3 (#9)\n",
    "### CellType: Exercise\n",
    "### Cell instruction: Instruction for question 6-9\n",
    "\n",
    "Now we are going to look at a regression problem. The data as described above (regr1) consists of 6 inputs (features) and one output (target) value. As for previous examples a new data set is generated each time you call the *regr1* function. To get exactly the same data set between different calls, use a fixed seed. New for this problem is that one can also control the amount of noise added to the target signal. We are going to use a relatively small training dataset (~250) and a larger validation dataset (~1000) to get a more robust estimation of the generalization performance. For regression problems we also need new performance measures. The *stats_reg* function will give you two such measures:\n",
    "* MSE = mean squared error\n",
    "* CorrCoeff = Pearson correlation coefficient for the scatter plot between predicted and true values.\n",
    "\n",
    "The cell below can be used as an template for all questions regarding this regression problem.\n",
    "\n",
    "#### Question 6\n",
    "Use 250 data points for training and about 1000 for validation and **no** added noise. Train an MLP to predict the target output. If you increase the complexity of the model (e.g. number of hidden nodes) you should be able to reach a very small training error. You will also most likely see that the validation error decreases as you increase the complexity or at least no clear sign of overtraining. **Even though the validation error is most likely still larger than the training error why do we not see any overtraining of the model?**\n",
    "\n",
    "**Note:** As with previous examples you may need to tune the optimization parameters to make sure that you have \"optimal\" training. That is, increase or decrease the learningrate, possibly train longer times (increase *epochs*) and change the *batch_size* parameter.\n",
    "\n",
    "#### Question 7\n",
    "Use the same training and validation data sets as above, but add 0.4 units of noise (set the second parameter when calling the *regr1* function to 0.4 for both training and validation). Now train again, starting with a \"small\" model and increase the number of hidden nodes as you monitor the validation result for each model. **How large model do you need in order to see overtraining?** Make a note of the validation error you obtained a this point!\n",
    "\n",
    "#### Question 8\n",
    "Instead of using the number of hidden nodes to control the complexity it is often better to use a regularization term added to the error function. You are now going to control the complexity by adding a *L2* regularizer (see the \"INPUT\" dictionary in the cell). You should modify this value until you find the \"near optimal\" validation performance. The number of hidden nodes should at this point be larger than the number found in the previous question. **Give the L2 value and the number of hidden nodes you found to give \"optimal\" validation performance.**\n",
    "\n",
    "#### Question 9 \n",
    "**Summarize your findings in a few sentences.**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "main_input (InputLayer)      (None, 6)                 0         \n",
      "_________________________________________________________________\n",
      "dense_39 (Dense)             (None, 8)                 56        \n",
      "_________________________________________________________________\n",
      "dense_40 (Dense)             (None, 1)                 9         \n",
      "=================================================================\n",
      "Total params: 65\n",
      "Trainable params: 65\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "\n",
      "#############  STATISTICS for Training Data ##############\n",
      "\n",
      "MSE   0.247402140498\n",
      "CorrCoeff   0.888256071109\n",
      "\n",
      "###########################################################\n",
      "\n",
      "\n",
      "#############  STATISTICS for Validation Data ##############\n",
      "\n",
      "MSE   0.372409692407\n",
      "CorrCoeff   0.820726106524\n",
      "\n",
      "###########################################################\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1267b7710>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x126a1f518>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nejUcZer3WcaqsvVa3/ni+Uxfu59Bbeq4TcnasZEj17HgYWPuDlvsa54cx/S7BgEw/8GzUODUvLZB\njRgm3excR2LTyCzW+tfFnSjSmsIizZtztpKZW8CTLuNkXdClIdPW7OO2M1syoktDBretR83YSG76\nchl/bDtK+waJNE+Oc+tzMOf+wSzecZSr+zTjit5N6fjUbKLCw5xyDq71HA+f145Xft7C8I71+W3L\nYad9X7qsi72ndXREmFMTV4DLezUlKiKMkd0bo5RizVPD6fbsLwA8d0ln2jdIZPuhU6Q2r0V8lOdb\nbgs/rfFsNu7PCHhQUKUZ9ySYevXqpZcvX+5/RyFEqWmtmb3hIEM71HPqbzLxj52c3b4ezZOdb2J5\nBUXM2XSQs9rVJUwpt6HRU8bPADx3NCupnPxCDmTkkFInnr0nThOmjGlnP1u0k0dGtHe7waYdySI5\nIYpXZ28hMSaC+4e1sxfZvTt/G6/O3sKkm/rSr2UyShkdF62tmz69vheFRZpHf1jHlNv78+3yPbz/\n23a6NU1i99EsVj013On9ioo0LR8zpqb3ND/51FXpNE+Otw81MuPugXRqVNP+GQFMurkv8zcf4vEL\nOjqtH9c/hWcu7lSqz00ptUJr7buCCQkKQogKsOdYNnmFRbTy0TggGAqLNEt3HuMMS84hv7CI56Zv\n5LozUpiz6SA3D2pZ4ilWN+0/SZNasW45MKtVu49TKy7K3rpOa01uQRH5hUVOx537xgK2HMzk7TE9\nOKtdXZ/n9EWCghBCVANbDmQyZ9NBe/Pp0ipuUJA6BSGEqMTaNUj02jopEKRJqhBCCDsJCkIIIewk\nKAghhLCToCCEEMJOgoIQQgg7CQpCCCHsJCgIIYSwk6AghBDCrsr1aFZKHQZKNiu7Qx3gSDkmpyqQ\naw4Ncs2hoSzX3Fxr7Xe88yoXFMpCKbW8ON28qxO55tAg1xwaKuKapfhICCGEnQQFIYQQdqEWFD4K\ndgKCQK45NMg1h4aAX3NI1SkIIYTwLdRyCkIIIXwImaCglDpPKbVFKbVNKTU+2OkpL0qppkqp+Uqp\njUqpDUqpe8z1tZVSvyqltpq/a1mOedT8HLYopc4NXupLTykVrpRapZSabr6u7tebpJSaopTarJTa\npJQ6IwSu+T7zO71eKfWNUiqmul2zUuozpdQhpdR6y7oSX6NSqqdSap257S1Vltl4tNbV/gcIB7YD\nLYEoYA3QMdjpKqdrawikmsuJwN9AR+AVYLy5fjzwsrnc0bz+aKCF+bmEB/s6SnHd9wOTgOnm6+p+\nvV8AN5nLUUBSdb5moDGwE4g1X38LjKtu1wycCaQC6y3rSnyNwFKgH6CAWcCI0qYpVHIKfYBtWusd\nWus8YDIwMshpKhda6/1a65XmciawCeMfaiTGjQTz9yXm8khgstY6V2u9E9iG8flUGUqpJsAFwCeW\n1dX5emti3Dw+BdBa52mtT1CNr9kUAcQqpSKAOGAf1eyatdYLgGMuq0t0jUqphkANrfVf2ogQX1qO\nKbFQCQqNgT2W1+nmumpFKZUC9ACWAPW11vvNTQeA+uZydfgsJgAPA0WWddX5elsAh4GJZpHZJ0qp\neKrxNWut9wKvAbuB/UCG1voXqvE1W5T0Ghuby67rSyVUgkK1p5RKAL4H7tVan7RuM58eqkUzM6XU\nhcAhrfUKb/tUp+s1RWAUMbyvte4BZGEUK9hVt2s2y9FHYgTERkC8UmqsdZ/qds2eBOMaQyUo7AWa\nWl43MddVC0qpSIyA8LXW+gdz9UEzW4n5+5C5vqp/FgOAi5VSaRjFgGcrpf6P6nu9YDz5pWutl5iv\np2AEiep8zUOBnVrrw1rrfOAHoD/V+5ptSnqNe81l1/WlEipBYRnQRinVQikVBVwFTAtymsqF2crg\nU2CT1vp1y6ZpwPXm8vXAT5b1VymlopVSLYA2GJVUVYLW+lGtdROtdQrG33Ge1nos1fR6AbTWB4A9\nSql25qpzgI1U42vGKDbqp5SKM7/j52DUl1Xna7Yp0TWaRU0nlVL9zM/qOssxJRfs2veK+gHOx2iZ\nsx14PNjpKcfrGoiRvVwLrDZ/zgeSgbnAVmAOUNtyzOPm57CFMrRSCPYPcBaO1kfV+nqB7sBy8+/8\nI1ArBK75X8BmYD3wFUarm2p1zcA3GHUm+Rg5wn+U5hqBXubntB14B7Njcml+pEezEEIIu1ApPhJC\nCFEMEhSEEELYSVAQQghhJ0FBCCGEnQQFIYQQdhIUhKhASqmzbCO7ClEZSVAQQghhJ0FBCA+UUmOV\nUkuVUquVUh+a8zecUkq9YY7xP1cpVdfct7tS6i+l1Fql1FTb+PdKqdZKqTlKqTVKqZVKqVbm6RMs\ncyN8Xaax74UoZxIUhHChlOoAXAkM0Fp3BwqBa4B4YLnWuhPwO/C0eciXwCNa667AOsv6r4F3tdbd\nMMbtsY182QO4F2N8/JYY4zkJUSlEBDsBQlRC5wA9gWXmQ3wsxqBkRcB/zX3+D/jBnOsgSWv9u7n+\nC+A7pVQi0FhrPRVAa50DYJ5vqdY63Xy9GkgBFgX+soTwT4KCEO4U8IXW+lGnlUo96bJfaceIybUs\nFyL/h6ISkeIjIdzNBUYrpeqBfc7c5hj/L6PNfa4GFmmtM4DjSqlB5vprgd+1MQteulLqEvMc0Uqp\nuAq9CiFKQZ5QhHChtd6olHoC+EUpFYYxguUdGJPb9DG3HcKodwBjeOMPzJv+DuAGc/21wIdKqWfN\nc1xegZchRKnIKKlCFJNS6pTWOiHY6RAikKT4SAghhJ3kFIQQQthJTkEIIYSdBAUhhBB2EhSEEELY\nSVAQQghhJ0FBCCGEnQQFIYQQdv8PARPxgxyHDOwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1268e3198>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 30.3 s, sys: 15.4 s, total: 45.7 s\n",
      "Wall time: 26.9 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# seed = 0 means random, seed > 0 means fixed\n",
    "seed = 3\n",
    "np.random.seed(seed) if seed else None\n",
    "\n",
    "# Generate training and validation data\n",
    "# Question 6\n",
    "# x_train, d_train = regr1(250, 0.0) # 250 data points with no noise\n",
    "# x_val, d_val = regr1(1000, 0.0)\n",
    "\n",
    "# Question 7 & 8\n",
    "x_train, d_train = regr1(250, 0.4) # 250 data points with no noise\n",
    "x_val, d_val = regr1(1000, 0.4)\n",
    "\n",
    "# Here we need to normalize the target values\n",
    "norm_m = d_train.mean(axis=0)\n",
    "norm_s = d_train.std(axis=0)\n",
    "d_train = (d_train - norm_m) / norm_s\n",
    "\n",
    "# We use the same normalization for the validation data.\n",
    "d_val = (d_val - norm_m) / norm_s\n",
    "\n",
    "\n",
    "# Define the network, cost function and minimization method\n",
    "INPUT = {'inp_dim': x_train.shape[1],         \n",
    "         'n_nod': [3],                      # number of nodes in hidden layer\n",
    "         'act_fun': 'tanh',                 # activation functions for the hidden layer\n",
    "         'out_act_fun': 'linear',           # output activation function\n",
    "         'opt_method': 'adam',               # minimization method\n",
    "         'cost_fun': 'mse',                 # error function\n",
    "         'lr_rate': 0.01,                   # learningrate\n",
    "         'lambd' : 0.0}                     # L2 regularization parameter    \n",
    "\n",
    "\n",
    "# Question 7\n",
    "#INPUT['n_nod'] = [6]\n",
    "\n",
    "# Question 8\n",
    "INPUT['n_nod'] = [8]\n",
    "INPUT['lambd'] = 0.015\n",
    "\n",
    "# Get the model\n",
    "model = pipline(**INPUT)\n",
    "\n",
    "# Print a summary of the model\n",
    "model.summary()\n",
    "#print(model.get_config())\n",
    "# Train the model\n",
    "estimator = model.fit(x_train, d_train,\n",
    "                      epochs = 1000,      # Number of epochs\n",
    "                      validation_data=(x_val, d_val),\n",
    "                      #batch_size = x_train.shape[0],   # Batch size = all data (batch learning)\n",
    "                      batch_size=50,                    # Batch size for true SGD\n",
    "                      verbose = 0)\n",
    "\n",
    "# Call the stats function to print out statistics for classification problems\n",
    "pred_trn = model.predict(x_train).reshape(d_train.shape)\n",
    "pred_val = model.predict(x_val).reshape(d_val.shape)\n",
    "stats_reg(d_train, pred_trn, 'Training', estimator)\n",
    "stats_reg(d_val, pred_val, 'Validation', estimator)\n",
    "\n",
    "# Scatter plots of predicted and true values\n",
    "plt.figure()\n",
    "plt.plot(d_train, pred_trn, 'g*', label='Predict vs True (Training)')\n",
    "plt.legend()\n",
    "plt.figure()\n",
    "plt.plot(d_val, pred_val, 'b*', label='Predict vs True (Validation)')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Plot the learning curves\n",
    "plt.figure()\n",
    "plt.plot(estimator.history['loss'], label='Training')\n",
    "plt.plot(estimator.history['val_loss'], label='Validation')\n",
    "plt.ylabel('MSE')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CellName: Ex4 (#10)\n",
    "### CellType: Exercise\n",
    "### Cell instruction: Instruction for question 10\n",
    "\n",
    "For this last exercise you are given a classification problem with a fixed training- and validation dataset. The data is the Pima Indians dataset described in the first cell. Your task is to perform a model section, coming up with your optimal MLP architecture together with the hyperparameters you used. We do not provide any python code for this question, only the part that reads the data from the two external files, *pima_trn.csv* and *pima_val.csv*.\n",
    "\n",
    "#### Question 10\n",
    " **Present an MLP with associated hyperparameters that maximizes the validation performance.**\n",
    "\n",
    "**Hint 1:** \n",
    "For classification problems it is often important to normalize the **input** data. Se the \"Ex3\" cell how this was done (in that case for the target data).\n",
    "\n",
    "**Hint 2:** You are allowed to use the ensemble technique to further increase the performance of the MLP (but no requirement).\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def stats_class_student(x = None, y = None, label = 'Training', modl = None):\n",
    "    \"\"\"\n",
    "    input :  \n",
    "             x = input\n",
    "             y = output\n",
    "             label = \"Provided text string\"\n",
    "             modl = the model\n",
    "             \n",
    "    output : \n",
    "             sensitivity = fraction of correctly classified positive cases\n",
    "             specificity = fraction of correctly classified negative cases\n",
    "             accuracy = fraction of correctly classified cases\n",
    "             loss = typically the cross-entropy error\n",
    "    \"\"\"\n",
    "    \n",
    "    def binary(y1):\n",
    "        y1[y1>.5] = 1.\n",
    "        y1[y1<= .5] = 0.        \n",
    "        return y1\n",
    "\n",
    "    y_pr = modl.predict(x, batch_size = x.shape[0], verbose=0).reshape(y.shape)\n",
    "                \n",
    "    nof_p, tp, nof_n, tn = [np.count_nonzero(k) for k in [y==1, y_pr[y==1.] > 0.5, y==0, y_pr[y==0.]<= 0.5]]\n",
    "    \n",
    "    sens = tp / nof_p\n",
    "    spec = tn / nof_n\n",
    "    acc = (tp + tn) / (len(y))\n",
    "    loss = modl.evaluate(x, y , batch_size =  x.shape[0], verbose=0)\n",
    "                \n",
    "    B = [acc, sens, spec, loss]\n",
    "    \n",
    "    return B "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def load_data():\n",
    "    pima_t = np.loadtxt(\"pima-trn.csv\", skiprows= 1, \n",
    "                        usecols = tuple(np.arange(1,10)) ).astype(\"float32\")\n",
    "    pima_v = np.loadtxt(\"pima-val.csv\", skiprows= 1,\n",
    "                        usecols = tuple(np.arange(1,10)) ).astype(\"float32\")\n",
    "\n",
    "\n",
    "    x_train, d_train = pima_t[:,:8], pima_t[:,-1]\n",
    "    x_val, d_val = pima_v[:,:8], pima_v[:,-1]\n",
    "\n",
    "    # Normalize training X and validation X\n",
    "    norm_m = x_train.mean(axis=0, keepdims=True)\n",
    "    norm_s = x_train.std(axis=0, keepdims=True)\n",
    "\n",
    "    x_train_normed = (x_train - norm_m) / norm_s\n",
    "    x_val_normed = (x_val - norm_m) / norm_s\n",
    "\n",
    "    assert x_train.shape == x_train_normed.shape\n",
    "    assert x_val.shape == x_val_normed.shape\n",
    "    \n",
    "    return x_train_normed, d_train, x_val_normed, d_val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def predict_values(model_params, other_params, x_train, d_train, x_val, d_val):\n",
    "    \n",
    "    # Get the model\n",
    "    model = pipline(**model_params)\n",
    "\n",
    "    # Print a summary of the model\n",
    "    model.summary()\n",
    "    \n",
    "    # Train the model\n",
    "    estimator = model.fit(x_train, d_train,\n",
    "                          epochs = other_params['epochs'],      # Number of epochs\n",
    "                          validation_data=(x_val, d_val),\n",
    "                          batch_size = other_params['batch_size'],\n",
    "                          verbose = 0)\n",
    "\n",
    "    # Call the stats function to print out statistics for classification problems\n",
    "    pred_trn = model.predict(x_train).reshape(d_train.shape)\n",
    "    pred_val = model.predict(x_val).reshape(d_val.shape)\n",
    "    \n",
    "    result_labels = ['Accuracy', 'Sensitivity', 'Specificity', 'Loss']\n",
    "    \n",
    "    train_results = stats_class_student(x_train, d_train, 'Training', model)\n",
    "    val_results = stats_class_student(x_val, d_val, 'Validation', model)\n",
    "    \n",
    "    if other_params['print_results'] == True:\n",
    "        \n",
    "        print('\\n#############  STATISTICS for Training Data ##############\\n')\n",
    "        for r in zip(result_labels, train_results):\n",
    "            print(*r, sep = '   ')\n",
    "        print('\\n#########################################################\\n')\n",
    "        \n",
    "        print('\\n#############  STATISTICS for Validation Data ##############\\n')\n",
    "        for r in zip(result_labels, val_results):\n",
    "            print(*r, sep = '   ')\n",
    "        print('\\n#########################################################\\n')  \n",
    "\n",
    "\n",
    "        # Plot the learning curves\n",
    "        plt.figure()\n",
    "        plt.plot(estimator.history['loss'], label='Training')\n",
    "        plt.plot(estimator.history['val_loss'], label='Validation')\n",
    "        plt.ylabel('Loss')\n",
    "        plt.xlabel('epoch')\n",
    "        plt.legend()\n",
    "        plt.show()\n",
    "    \n",
    "    if other_params['save_results'] == True:\n",
    "        param_string = \" \".join(map(str, list(model_params.values())))\n",
    "        other_param_string = \" \".join(map(str, list(other_params.values())))\n",
    "        train_results_string = \" \".join(map(str, train_results))\n",
    "        val_results_string = \" \".join(map(str, val_results))\n",
    "        \n",
    "        with open(\"model_results.txt\", \"a\") as myfile:\n",
    "            myfile.write(\"{} {} {} {}\\n\".format(train_results_string, val_results_string, param_string, other_param_string))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "main_input (InputLayer)      (None, 8)                 0         \n",
      "_________________________________________________________________\n",
      "dense_940 (Dense)            (None, 15)                135       \n",
      "_________________________________________________________________\n",
      "dense_941 (Dense)            (None, 1)                 16        \n",
      "=================================================================\n",
      "Total params: 151\n",
      "Trainable params: 151\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "\n",
      "#############  STATISTICS for Training Data ##############\n",
      "\n",
      "Accuracy   0.7434944237918215\n",
      "Sensitivity   0.6223404255319149\n",
      "Specificity   0.8085714285714286\n",
      "Loss   0.557715654373\n",
      "\n",
      "#########################################################\n",
      "\n",
      "\n",
      "#############  STATISTICS for Validation Data ##############\n",
      "\n",
      "Accuracy   0.6956521739130435\n",
      "Sensitivity   0.55\n",
      "Specificity   0.7733333333333333\n",
      "Loss   0.582406461239\n",
      "\n",
      "#########################################################\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEKCAYAAAD9xUlFAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3Xl8lOW9///XJ/s6CVkgYQ17WGWJuOACblXrUi31SEWr\nPaeecrSbpz3H09PW5Tx66vf38Ge12q9bq9alWivua63FBTcERHYMCkgghCxA9mVmru8f92QIkEAI\nGSYw7+fjMY8kM/fc88kNmfdc13Xf12XOOURERADiol2AiIj0HQoFEREJUyiIiEiYQkFERMIUCiIi\nEqZQEBGRMIWCiIiEKRRERCRMoSAiImEJ0S7gUOXl5bmioqJolyEiclRZunRplXMu/2DbHXWhUFRU\nxJIlS6JdhojIUcXMNndnO3UfiYhImEJBRETCFAoiIhJ21I0piMixo62tjbKyMpqbm6NdyjEjJSWF\nwYMHk5iY2KPnKxREJGrKysrIzMykqKgIM4t2OUc95xzV1dWUlZUxfPjwHu1D3UciEjXNzc3k5uYq\nEHqJmZGbm3tYLS+FgohElQKhdx3u8YyZUFi/vY7b31hPTUNrtEsREemzYiYUNlbVc8/CDWzfrQEt\nEfFUV1czZcoUpkyZQkFBAYMGDQr/3NravQ+Q11xzDevXrz/gNr///e954okneqPkiIuZgebMFG8k\nvq65LcqViEhfkZuby/LlywG4+eabycjI4Kc//ele2zjncM4RF9f5Z+iHH374oK9z3XXXHX6xR0jM\ntBQyU7z8q2v2R7kSEenrNmzYwPjx47niiiuYMGEC5eXlXHvttZSUlDBhwgRuvfXW8LannHIKy5cv\nx+/3k52dzY033shxxx3HSSedxI4dOwD4xS9+wZ133hne/sYbb2TGjBmMHTuWDz74AICGhga++c1v\nMn78eObMmUNJSUk4sI6k2GsptKilINIX3fLSatZsq+3VfY4f6OOmCyf06Lnr1q3j0UcfpaSkBIDb\nbruNnJwc/H4/s2fPZs6cOYwfP36v5+zevZvTTz+d2267jRtuuIGHHnqIG2+8cb99O+dYvHgxL774\nIrfeeiuvv/46d999NwUFBSxYsIDPPvuMadOm9ajuw6WWgohIJ0aOHBkOBIAnn3ySadOmMW3aNNau\nXcuaNWv2e05qairnnXceANOnT2fTpk2d7vvSSy/db5tFixZx+eWXA3DccccxYULPwuxwxVBLwftV\n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\nQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1c9421f98>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "np.random.seed(1)\n",
    "X_train, Y_train, X_val, Y_val = load_data()\n",
    "\n",
    "\n",
    "model_parameters = {'inp_dim': X_train.shape[1],         \n",
    "         'n_nod': [20],                      # number of nodes in hidden layer\n",
    "         'act_fun': 'relu',                 # activation functions for the hidden layer\n",
    "         'out_act_fun': 'sigmoid',           # output activation function\n",
    "         'opt_method': 'adam',               # minimization method\n",
    "         'cost_fun': 'binary_crossentropy',                 # error function\n",
    "         'lr_rate': 0.03,                   # learningrate\n",
    "         'lambd' : 0.2\n",
    "         }                                  # L2 regularization parameter\n",
    "\n",
    "other_parameters = {'batch_size': 64,\n",
    "                    'epochs': 40,\n",
    "                    'print_results': True,\n",
    "                    'save_results': False}\n",
    "\n",
    "#n_hidden = np.linspace(2, 20, num=5, dtype=np.int32)\n",
    "n_h = 15\n",
    "learn_rate = np.linspace(0.001, 0.2, num=10)\n",
    "lambd = np.linspace(0.001, 0.8, num=10)\n",
    "\n",
    "#for n_h in n_hidden:\n",
    "#for lr in learn_rate:\n",
    "    #for lbd in lambd:\n",
    "        #model_parameters['n_nod'] = [n_h]\n",
    "        #model_parameters['lr_rate'] = lr\n",
    "        #model_parameters['lambd'] = lbd\n",
    "        #predict_values(model_parameters, other_parameters, X_train, Y_train, X_val, Y_val)\n",
    "\n",
    "model_parameters['n_nod'] = [15]\n",
    "model_parameters['lr_rate'] = 0.0673333333333\n",
    "model_parameters['lambd'] = 0.533666666667\n",
    "predict_values(model_parameters, other_parameters, X_train, Y_train, X_val, Y_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The report!\n",
    "\n",
    "\n",
    "### Olof Harrysson\n",
    "\n",
    "### This report has explored principles and techniques found when doing deep learning with neural networks. Priciples such as overtraining and how to avoid it has been applied.\n",
    "\n",
    "### Completing the report has given insight and experience in parameter tuning.\n",
    "\n",
    "### Answers to questions\n",
    "#### 1) Because the input layer is of dimension 2, a hyperplane dimension of 1, e.i. a line, must be able to separate the two classes for the problem to be solvable.\n",
    "\n",
    "If you disregard the activation functions - the output from a hidden layer with one node is similar to a hyperplane, Wx + b. If that output would be 0, that point would be on the hyperplane. If it's below or above, that can be attributed to the different classes respectively.\n",
    "\n",
    "#### 2) Accuracy train: 0.85, Loss: 0.326795876026\n",
    "Accuracy val: 0.873, Loss: 0.292847275734\n",
    "\n",
    "#### 3) 7 hidden nodes are needed get a training accuracy over 95%.\n",
    "\n",
    "#### 4) 7 hidden -> Loss val: 1.39592456818. Increase is 1,1030772924\n",
    "Measuring accuracy.\n",
    "1 -> 0.873\n",
    "2 -> 0.823\n",
    "3 -> 0.835\n",
    "4 -> 0.848\n",
    "5 -> 0.831\n",
    "6 -> 0.836\n",
    "7 -> 0.819\n",
    "\n",
    "#### 5) Since the data is circular, more hyperplanes are needed to \"entrap\" the inner data. \n",
    "\n",
    "#### 6) train\n",
    "MSE: 0.264494618773\n",
    "CorrCoeff: 0.859363948353\n",
    "\n",
    "val\n",
    "MSE   0.436503838003\n",
    "CorrCoeff   0.798252758671\n",
    "\n",
    "Since there is no noise the train data and val data has a strong correlation. This means that even if you fit the model to the training data very tightly, it will not over-fit the training data.\n",
    "\n",
    "#### 7 n=3\n",
    "train\n",
    "MSE   0.354513776302\n",
    "CorrCoeff   0.804978441342\n",
    "\n",
    "val\n",
    "MSE   0.444009891152\n",
    "CorrCoeff   0.726105415025\n",
    "\n",
    "n=6\n",
    "train\n",
    "MSE   0.208986759186\n",
    "CorrCoeff   0.890274833162\n",
    "\n",
    "val\n",
    "MSE   0.398102223128\n",
    "CorrCoeff   0.754891140325\n",
    "\n",
    "n=7\n",
    "train\n",
    "MSE   0.167535784841\n",
    "CorrCoeff   0.916457015243\n",
    "\n",
    "val\n",
    "MSE   0.424443940818\n",
    "CorrCoeff   0.801403604715\n",
    "\n",
    "n=9\n",
    "train\n",
    "MSE   0.135941742361\n",
    "CorrCoeff   0.930696918325\n",
    "\n",
    "val\n",
    "MSE   0.483174244314\n",
    "CorrCoeff   0.773358744271\n",
    "\n",
    "If the validation error is much larger than the training error the model is probably overtrained. Since the method is not deterministic, the correlation coefficient affects the result. A high coefficient can mask an overtrained network.\n",
    "\n",
    "It's also useful to see if the valitation error converges in a graph.\n",
    "\n",
    "With these points in mind - when the hidden nodes = 7 is when the network starts to overtrain.\n",
    "\n",
    "#### 8 n=10, lambd=0\n",
    "train\n",
    "MSE   0.161109393835\n",
    "CorrCoeff   0.916619802074\n",
    "\n",
    "val\n",
    "MSE   0.469973628223\n",
    "CorrCoeff   0.746429934497\n",
    "\n",
    "n=10, lambd=0.1\n",
    "train\n",
    "MSE   0.39141086936\n",
    "CorrCoeff   0.799933541451\n",
    "\n",
    "val\n",
    "MSE   0.429309765995\n",
    "CorrCoeff   0.779678598137\n",
    "\n",
    "n=10, lambd=0.2\n",
    "train\n",
    "MSE   0.40924063921\n",
    "CorrCoeff   0.793328561582\n",
    "\n",
    "val\n",
    "MSE   0.441342411935\n",
    "CorrCoeff   0.776023591246\n",
    "\n",
    "n=10, lambd=0.8\n",
    "train\n",
    "MSE   0.461088508368\n",
    "CorrCoeff   0.751881451183\n",
    "\n",
    "val\n",
    "MSE   0.486878412962\n",
    "CorrCoeff   0.73821180227\n",
    "\n",
    "n=8 lambd=0.005\n",
    "train\n",
    "MSE   0.225041157007\n",
    "CorrCoeff   0.892743254537\n",
    "\n",
    "val\n",
    "MSE   0.370325966924\n",
    "CorrCoeff   0.812985531054\n",
    "\n",
    "n=8 lambd=0.015\n",
    "train\n",
    "MSE   0.247402140498\n",
    "CorrCoeff   0.888256071109\n",
    "\n",
    "val\n",
    "MSE   0.372409692407\n",
    "CorrCoeff   0.820726106524\n",
    "\n",
    "Conclusion - 8 hidden nodes with lambda set to 0.015 were the best parameters I found\n",
    "\n",
    "#### 9 To spot overtraining, compare the validation error with the training error to see if there is a large discrepancy. If there is, add a regularizer.\n",
    "\n",
    "Often a larger network will overtrain and is in need of a regularizer.\n",
    "\n",
    "#### 10 I did a linear search over many of the parameters and saved the parameters and the results in a text file. Due to the program running slowly, I initially ran the programs with a low number of epochs and far between the values for the parameters. I wrote a script that found the parameters which gave the best accuracy for the validation data. It turned out that all the best results were for when the number of hidden nodes where 15 so I fixed this parameters and continiued the search for the others.\n",
    "\n",
    "I ended up with these parameters and results.\n",
    "\n",
    "15 hidden nodes, a learning rate of 0.0673333333333, lambda of 0.533666666667 gave the the results\n",
    "\n",
    "Train data:\n",
    "Accuracy   0.7434944237918215\n",
    "Sensitivity   0.6223404255319149\n",
    "Specificity   0.8085714285714286\n",
    "Loss   0.557715654373\n",
    "\n",
    "Validation data:\n",
    "Accuracy   0.6956521739130435\n",
    "Sensitivity   0.55\n",
    "Specificity   0.7733333333333333\n",
    "Loss   0.582406461239\n",
    "\n",
    "### Finding the right parameters for a neural network often seems like it's more of an art than a science. Even so, there exist some techniques to evaluate your network to find what's wrong with it. A good start is to know your data. Start with a simple model and only make it more complex when needed. Plot, print or somehow evaluate your results to figure out what part can be improved. Experiment and be prepared for an all nighter :)\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
